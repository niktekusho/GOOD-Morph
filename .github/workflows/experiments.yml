name: Create a release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ steps.create-artifact.outputs.artifact_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        # Solves the warning on the path (inside with)
        env:
          STORE_PATH: ${{ env.STORE_PATH }}
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next

      - name: Build with Next.js
        run: pnpm run build

      - name: Create artifact
        id: create-artifact
        env:
          NEXT_OUTPUT: out
        run: |
          echo ::group::Archive artifact
          tar \
            --dereference --hard-dereference \
            --directory $NEXT_OUTPUT \
            -cvf "$RUNNER_TEMP/artifact-${{ github.run_id }}.tar" \
            --exclude=.git \
            --exclude=.github \
            .
          echo ::endgroup::
          echo "artifact=$RUNNER_TEMP/artifact-${{ github.run_id }}.tar" >> "$GITHUB_OUTPUT"
          echo "artifact_id=good-morph-app-${{ github.run_id }}" >> "$GITHUB_OUTPUT"

      - name: Upload archive to GitHub for later retrieval
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-artifact.outputs.artifact_id }}
          path: ${{ steps.create-artifact.outputs.artifact }}
          retention-days: 1
          if-no-files-found: error

  create_release:
    permissions:
      # This is needed to create a release...
      contents: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_id }}

      - name: Create new release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ls -la
          gh release create delete-me-$(date -u "+%Y-%m-%d___%H-%M") ./package.json
